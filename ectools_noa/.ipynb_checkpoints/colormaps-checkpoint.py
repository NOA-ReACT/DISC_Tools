import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors


def make_colormap(seq):
    """Return a LinearSegmentedColormap
    seq: a sequence of floats and RGB-tuples. The floats should be increasing
    and in the interval (0,1).
    """
    seq = [(None,) * 3, 0.0] + list(seq) + [1.0, (None,) * 3]
    cdict = {'red': [], 'green': [], 'blue': []}
    for i, item in enumerate(seq):
        if isinstance(item, float):
            r1, g1, b1 = seq[i - 1]
            r2, g2, b2 = seq[i + 1]
            cdict['red'].append([item, r1, r2])
            cdict['green'].append([item, g1, g2])
            cdict['blue'].append([item, b1, b2])
    return mcolors.LinearSegmentedColormap('CustomMap', cdict)

def make_coloralphamap(seq):
    """Return a LinearSegmentedColormap
    seq: a sequence of floats and RGB-tuples. The floats should be increasing
    and in the interval (0,1).
    """
    seq = [(None,) * 3, 0.0] + list(seq) + [1.0, (None,) * 3]
    cdict = {'red': [], 'green': [], 'blue': []}
    for i, item in enumerate(seq):
        if isinstance(item, float):
            r1, g1, b1 = seq[i - 1]
            r2, g2, b2 = seq[i + 1]
            cdict['red'].append([item, r1, r2])
            cdict['green'].append([item, g1, g2])
            cdict['blue'].append([item, b1, b2])
            cdict['alpha'].append([item, b1, b2])
    return mcolors.LinearSegmentedColormap('CustomMap', cdict)

def chiljet():
    c = mcolors.ColorConverter().to_rgb
    colormap = make_colormap([c('white'), c('blue'), 0.2, c('blue'), c('green'), 0.35, c('green'), c('yellow'), 0.67, c('yellow'), c('red'), 0.9, c('red'),c('black')])
    return colormap

def chiljet2():
    c = mcolors.ColorConverter().to_rgb
    colormap = make_colormap([c('0.9'), c('blue'), 0.2, c('blue'), c('green'), 0.35, c('green'), c('yellow'), 0.67, c('yellow'), c('red'), 0.9, c('red'),c('black')])
    return colormap


def calipso_cm() :
    #
    red=(0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\
         0,  0,  0,  0,  0,  0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
         255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
         255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
         255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 70, 70,\
         70, 90, 90, 90,110,110,110,130,130,130,150,150,150,150,150,150,170,170,170,170,\
         170,170,180,180,180,180,180,180,190,190,190,190,190,190,200,200,200,200,200,200,\
         210,210,210,210,210,210,215,215,215,215,215,215,220,220,220,220,220,220,225,225,\
         225,225,225,225,230,230,230,230,230,230,235,235,235,235,235,235,240,240,240,240,\
         240,240,240,245,245,245,245,245,245,245,255,255,255,255,255,255,255)


    green=(42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,\
           42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,127,127,127,127,127,127,\
           127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,\
           127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,255,255,255,127,\
           127,127,170,170,170,170,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
           255,230,230,230,230,230,230,230,230,230,212,212,212,212,212,212,212,212,212,170,\
           170,170,170,170,170,170,170,170,127,127,127,127,127,127, 85, 85, 85, 85, 85, 85,\
           0,  0,  0,  0,  0,  0, 42, 42, 42, 42, 42, 42, 85, 85, 85,127,127,127, 70, 70,\
           70, 90, 90, 90,110,110,110,130,130,130,150,150,150,150,150,150,170,170,170,170,\
           170,170,180,180,180,180,180,180,190,190,190,190,190,190,200,200,200,200,200,200,\
           210,210,210,210,210,210,215,215,215,215,215,215,220,220,220,220,220,220,225,225,\
           225,225,225,225,230,230,230,230,230,230,235,235,235,235,235,235,240,240,240,240,\
           240,240,240,245,245,245,245,245,245,245,255,255,255,255,255,255,255)

    blue=(170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,\
          170,170,170,170,170,170,170,170,170,170,170,170,170,170,255,255,255,255,255,255,\
          255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
          255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,170,170,170,127,\
          127,127, 85, 85, 85, 85,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\
          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\
          0,  0,  0,  0,  0,  0, 85, 85, 85, 85, 85, 85,127,127,127,170,170,170, 70, 70,\
          70, 90, 90, 90,110,110,110,130,130,130,150,150,150,150,150,150,170,170,170,170,\
          170,170,180,180,180,180,180,180,190,190,190,190,190,190,200,200,200,200,200,200,\
          210,210,210,210,210,210,215,215,215,215,215,215,220,220,220,220,220,220,225,225,\
          225,225,225,225,230,230,230,230,230,230,235,235,235,235,235,235,240,240,240,240,\
          240,240,240,245,245,245,245,245,245,245,255,255,255,255,255,255)

    red=tuple(z/255. for z in red)
    green=tuple(z/255. for z in green)
    blue=tuple(z/255. for z in blue)
    
    colors=np.zeros(shape=(len(red),4))

    for i in range (0,len(red)-1) :
        colors[i,0]=red[i]
        colors[i,1]=green[i]
        colors[i,2]=blue[i]
        colors[i,3]=1.0

    colors=tuple(colors)            
    cm=mpl.colors.ListedColormap(colors,'CalipsoATBcm')
    plt.register_cmap(cmap=cm)

    return cm