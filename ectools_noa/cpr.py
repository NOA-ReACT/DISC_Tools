"""
Copyright 2023- ECMWF

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

__author__ = "Shannon Mason, Bernat Puigdomenech Treserras, Anja Hunerbein, Nicole Docter"
__copyright__ = "Copyright 2023- ECMWF"
__license__ = "Apache license version 2.0"
__maintainer__ = "Shannon Mason"
__email__ = "shannon.mason@ecmwf.int"


import seaborn as sns
sns.set_style('ticks')
sns.set_context('poster')

import numpy as np
import xarray as xr
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
import ecplot
from colormaps import register_rgb_colormap

def plot(cpr_file,group,var_name,png_file):

    nrows=1
    fig, axes = plt.subplots(figsize=(25,7*nrows), nrows=nrows, 
                             sharex=False, sharey=False, gridspec_kw={'hspace':0.5})

    # Reflectivity
    if var_name == "reflectivity_no_attenuation_correction" or \
        var_name == "reflectivity_masked" or \
        var_name == "reflectivity_corrected":

        CPR = xr.open_dataset(cpr_file, group=group, engine='h5netcdf')
        CPR['reflectivity_corrected'].where(~np.isnan(CPR['reflectivity_corrected']), drop=True)

        ecplot.plot_EC_2D(axes, CPR, var_name, 'Reflectivity', units='dBZ', cmap=incus_cm(), 
            plot_range = [-35.,35.], plot_scale='Linear')

    # JAXA reflectvity
    elif var_name == "radarReflectivityFactor":

        CPR_Data = xr.open_dataset(cpr_file, group='ScienceData/Data', engine='h5netcdf', phony_dims='sort')
        CPR_Geo = xr.open_dataset(cpr_file, group='ScienceData/Geo', engine='h5netcdf', phony_dims='sort')
        # List dimensions
        CPR_Data_dim_names = list(CPR_Data.dims.keys())
        CPR_Geo_dim_names = list(CPR_Geo.dims.keys())
        # Rename dimensions
        CPR_Data = CPR_Data.rename({CPR_Data_dim_names[0]: 'along_track', CPR_Data_dim_names[1]: 'CPR_height'})
        CPR_Geo = CPR_Geo.rename({CPR_Geo_dim_names[0]: 'along_track', CPR_Geo_dim_names[1]: 'CPR_height'})
        # Z linear to dBZ
        CPR_Data['radarReflectivityFactor'].values = 10. * np.log10(CPR_Data['radarReflectivityFactor'].values)
        # Update units
        CPR_Data['radarReflectivityFactor'].attrs['units'] = 'dBZ' 
        new_ds = xr.merge([CPR_Data,CPR_Geo])
        new_ds.encoding['source'] = CPR_Data.encoding['source']

        ecplot.plot_EC_2D(axes, new_ds, var_name, 'Reflectivity', units='dBZ', cmap=incus_cm(), 
            plot_range = [-35.,35.], plot_scale='Linear', timevar='profileTime', 
            heightvar='binHeight')

    # Doppler velocity
    elif var_name == "doppler_velocity_uncorrected" or \
        var_name == "doppler_velocity_corrected_for_nubf" or \
        var_name == "doppler_velocity_integrated" or \
        var_name == "sedimentation_velocity_best_estimate" or \
        var_name == "doppler_velocity_forward":

        CPR = xr.open_dataset(cpr_file, group=group, engine='h5netcdf')

        ecplot.plot_EC_2D(axes, CPR, var_name, 'Doppler velocity', units='m/s', cmap=doppler_cm(), 
            plot_range = [6.,-2], plot_scale='Linear')

    # JAXA Doppler velocity
    elif var_name == "dopplerVelocity":

        CPR_Geo = xr.open_dataset(cpr_file, group='ScienceData/Geo', engine='h5netcdf', phony_dims='sort')
        CPR_Data = xr.open_dataset(cpr_file, group='ScienceData/Data', engine='h5netcdf', phony_dims='sort')
        # List dimensions
        CPR_Data_dim_names = list(CPR_Data.dims.keys())
        CPR_Geo_dim_names = list(CPR_Geo.dims.keys())
        # Rename dimensions
        CPR_Data = CPR_Data.rename({CPR_Data_dim_names[0]: 'along_track', CPR_Data_dim_names[1]: 'CPR_height'})
        CPR_Geo = CPR_Geo.rename({CPR_Geo_dim_names[0]: 'along_track', CPR_Geo_dim_names[1]: 'CPR_height'})
        # Change the sign of the doppler velocity
        CPR_Data['dopplerVelocity'].values = CPR_Data['dopplerVelocity'].values * -1 
        new_ds = xr.merge([CPR_Data,CPR_Geo])
        new_ds.encoding['source'] = CPR_Data.encoding['source']
        
        ecplot.plot_EC_2D(axes, new_ds, var_name, 'Doppler velocity', units='m/s', cmap=doppler_cm(), 
            plot_range = [6.,-2.], plot_scale='Linear', timevar='profileTime', 
            heightvar='binHeight')

    # Hydrometeor classification
    elif var_name == "hydrometeor_classification":

        CTC_category_colors = [sns.xkcd_rgb['grey'],      #missing data
            sns.xkcd_rgb['reddish brown'],       #surface and subsurface
            sns.xkcd_rgb['white'],       #clear
            sns.xkcd_rgb['pale yellow'],  #liquid cloud
            sns.xkcd_rgb['golden'], # drizzling liquid cloud
            sns.xkcd_rgb['orange'], # warm rain
            sns.xkcd_rgb['bright red'],    #cold rain
            sns.xkcd_rgb['easter purple'], # melting snow
            sns.xkcd_rgb["prussian blue"],   # rimed snow (poss. liquid)
            sns.xkcd_rgb['bright blue'], # snow
            sns.xkcd_rgb['light blue'],    # ice (no liquid)
            sns.xkcd_rgb['ice blue'],      # strat. ice
            sns.xkcd_rgb['ugly green'],    # insects
            sns.xkcd_rgb['dark red'],      # heavy rain likely 
            sns.xkcd_rgb["royal blue"],   # mixed-phase precip. likely
            sns.xkcd_rgb['dark red'],      # heavy rain
            sns.xkcd_rgb["navy blue"],   #heavy mixed-phase precipitation
            sns.xkcd_rgb['dull red'],     # rain in clutter 
            sns.xkcd_rgb['off blue'],     #snow in clutter
            sns.xkcd_rgb['dull yellow'],    # cloud in clutter 
            sns.xkcd_rgb['light grey'],    # clear (poss. liquid) 
            sns.xkcd_rgb['silver'],        # unknown
        ]

        CPR = xr.open_dataset(cpr_file, group=group)
        ecplot.plot_EC_target_classification(axes, CPR, var_name, 
            CTC_category_colors, title_prefix="", label_fontsize=10)

    # C-CLD water content
    elif var_name == "water_content":

        CPR = xr.open_dataset(cpr_file, group='ScienceData', engine='h5netcdf') 
        ecplot.plot_EC_2D(axes, CPR, var_name, 'WC', units='kg$~$m$^{-3}$', cmap=tlo_cm(), 
            plot_range = [1e-6,1e-3], plot_scale='logarithmic')

    # C-CLD characteristic diameter
    elif var_name == "characteristic_diameter":
     
        # need to convert m to mm
        CPR = xr.open_dataset(cpr_file, group='ScienceData', engine='h5netcdf') 
        CPR['characteristic_diameter'].values = CPR['characteristic_diameter'].values * 1e3
        CPR['characteristic_diameter'].attrs['units'] = 'mm'

        ecplot.plot_EC_2D(axes, CPR, var_name, 'Dm', units='mm', cmap=incus_cm(), 
            plot_range = [0,1.7], plot_scale='Linear')

    else: 
        print("Configuration not found for "+var_name)

    plt.savefig(png_file, bbox_inches='tight')

def tol_cm() :
    r = (136,69,19,204,170,136,51,221)
    g = (204,170,119,102,68,34,34,204)
    b = (238,153,51,119,153,85,136,119)
    cm = register_rgb_colormap(r,g,b,'tol')
    return cm

# tol3
def tlo_cm():
    r=(232,221,209,195,181,167,155,140,111,96,85,78,77,78,84,89,96,105,119,140,166,190,209,221,228,\
        231,230,228,223,218,184,149,114,82)
    g=(236,216,193,168,143,120,98,78,76,89,104,121,138,150,158,165,171,177,183,188,190,188,181,170,\
        156,140,121,99,72,34,34,33,30,26)
    b=(251,239,225,209,194,180,167,153,155,169,184,197,198,188,179,169,158,144,125,104,84,72,65,60,\
        57,53,50,45,40,34,30,27,23,19)
    cm = register_rgb_colormap(r,g,b,'tlo')
    return cm

def arm_cm():
    r=(235,217,171,135,0,0,0,0,4,21,45,81,255,255,255,255,255,255,223,175,117,150,190,255,255,173,120,0)
    g=(235,227,202,158,231,182,117,0,138,168,188,201,255,206,158,109,61,12,0,0,0,0,0,0,180,108,58,0)
    b=(235,208,196,170,255,255,255,255,92,55,36,46,0,0,0,0,0,0,0,0,255,255,255,255,255,69,0,0)
    cm = register_rgb_colormap(r,g,b,'arm')
    return cm

def byr_cm():
    r=(0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124,\
        128,132,136,140,144,148,152,156,160,164,168,172,176,180,184,188,192,196,200,204,208,212,216,220,224,\
        228,232,236,240,244,248,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
        255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
        255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    g=(0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124,\
        128,132,136,140,144,148,152,156,160,164,168,172,176,180,184,188,192,196,200,204,208,212,216,220,224,\
        228,232,236,240,244,248,252,255,250,246,242,238,234,230,226,222,218,214,210,206,202,198,194,190,186,\
        182,178,174,170,166,162,158,154,150,146,142,138,134,130,126,122,118,114,110,106,102,98,94,90,86,82,\
        78,74,70,66,62,58,54,50,46,42,38,34,30,26,22,18,14,10,6,2)
    b=(255,250,246,242,238,234,230,226,222,218,214,210,206,202,198,194,190,186,182,178,174,170,166,162,158,\
        154,150,146,142,138,134,130,126,122,118,114,110,106,102,98,94,90,86,82,78,74,70,66,62,58,54,50,46,42,38,\
        34,30,26,22,18,14,10,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    cm = register_rgb_colormap(r,g,b,'byr')
    return cm

def tat_cm():
    r=(223,209,195,181,168,154,140,127,111,95,79,63,47,31,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,63,95,127,\
        159,191,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,239,223,207,191,175,\
        159,143,127)
    g=(223,209,195,181,168,154,140,127,111,95,79,63,47,31,15,0,19,39,59,79,99,119,139,159,171,183,195,207,219,\
        231,243,255,255,255,255,255,255,255,255,255,239,223,207,191,175,159,143,127,111,95,79,63,47,31,15,0,0,\
        0,0,0,0,0,0,0)
    b=(223,227,232,236,241,245,250,255,255,255,255,255,255,255,255,255,243,231,219,207,195,183,171,159,139,119,\
        99,79,59,39,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,31,47,63,79,95,111,127)
    cm = register_rgb_colormap(r,g,b,'tat')
    return cm

def rainbow_cm():
    r=(144,141,135,129,123,117,111,105,99,93,87,81,75,69,63,57,51,45,39,33,27,21,15,9,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,24,40,56,72,88,104,120,136,152,168,184,200,216,\
        232,248,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
        255,255,255,255,255,255,255,255,250,240,230,220,210,200,190,180,170,160,150,140,130,120,110)
    g=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,16,26,37,48,58,69,80,90,101,112,122,133,144,154,165,176,\
        186,197,208,218,229,240,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
        255,255,255,255,255,255,255,255,255,255,255,255,251,243,235,227,219,211,203,195,187,179,171,163,155,147,139,\
        131,123,115,107,99,91,83,75,67,59,51,43,35,27,19,11,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    b=(111,114,120,126,132,138,144,150,156,162,168,174,180,186,192,198,204,210,216,222,228,234,240,246,252,255,255,\
        255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247,231,215,199,183,\
        167,151,135,119,103,87,71,55,39,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    cm = register_rgb_colormap(r,g,b,'rainbow')
    return cm

def doppler_cm():
    r=(255,251,247,242,238,234,229,225,221,216,212,208,203,199,195,190,186,182,177,173,169,164,160,156,151,147,143,\
        138,134,130,125,121,117,112,108,104,99,95,91,86,82,78,73,69,65,60,56,52,47,43,39,34,30,26,21,17,13,8,4,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,\
        255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    g=(0,4,8,13,17,21,26,30,34,39,43,47,52,56,60,65,69,73,78,82,86,91,95,99,104,108,112,117,121,125,130,134,138,143,\
        147,151,156,160,164,169,173,177,182,186,190,195,199,203,208,212,216,221,225,229,234,238,242,247,251,255,255,247,\
        238,229,220,211,203,194,185,176,167,158,150,141,132,123,114,105,97,88,79,70,61,52,44,35,26,17,8,0,255,247,238,\
        229,220,211,203,194,185,176,167,158,150,141,132,123,114,105,97,88,79,70,61,52,44,35,26,17,8,0)
    b=(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
        255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
        255,255,255,255,127,131,136,140,145,149,153,158,162,167,171,176,180,184,189,193,198,202,206,211,215,220,224,229,\
        233,237,242,246,251,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)

    r = np.flip(np.array(r))
    g = np.flip(np.array(g))
    b = np.flip(np.array(b))

    cm = register_rgb_colormap(r,g,b,'doppler')
    return cm

def incus_cm():
    r=(27,29,31,33,34,36,38,39,41,43,44,46,48,50,51,53,55,57,58,60,62,64,65,67,69,71,73,74,76,78,80,82,84,85,87,89,91,\
        93,95,96,98,100,102,104,106,108,110,111,113,115,117,119,121,123,125,127,129,131,133,135,137,133,129,125,120,116,\
        112,105,101,97,93,88,84,84,85,86,88,89,91,93,95,97,99,101,103,108,113,120,125,130,135,140,145,150,157,162,166,\
        171,175,180,186,190,194,199,203,208,212,218,221,224,227,230,233,237,240,243,246,249,252,254,252,251,250,249,247,\
        246,245,245,243,242,241,239,238,240,239,239,239,238,238,238,239,238,238,237,237,237,238,238,237,237,237,236,236,\
        236,236,235,232,230,227,225,222,219,217,214,211,208,206,203,199,196,193,189,186,182,178,174,170,166,162,158,150,\
        154,158,161,165,169,173,177,181,184,188,192,196,200,203,207,211,213,215,216,218,219,220,221,222,222,224,224,225,\
        225,224,226,226,226,228,229,229,231,231,232,199,196,192,188,185,181,178,174,171,168,166,164,161,159,156,153,151,\
        148,146,143,140,137,135,131,127,123,119,114,110,106,101,97,93,89,85,80,76,72,68,64)
    g=(27,29,30,31,33,34,36,37,38,40,41,42,44,45,47,48,50,51,52,54,55,57,58,60,61,63,64,66,67,69,70,72,73,75,76,78,79,\
        81,82,84,86,87,89,90,92,93,95,97,98,100,101,103,105,106,108,109,111,113,114,116,118,122,126,130,133,137,141,145,\
        148,152,155,158,161,164,168,170,173,176,179,181,184,187,190,192,195,197,199,200,202,204,205,207,209,211,212,214,\
        216,217,219,221,222,224,226,228,229,231,233,234,236,238,239,241,243,245,246,248,250,252,254,254,251,247,244,240,\
        236,233,229,226,222,218,215,211,207,203,199,195,191,187,182,178,174,169,165,161,157,152,147,142,137,132,128,123,\
        118,112,107,101,98,94,90,86,81,77,73,69,65,61,56,51,47,43,39,35,31,27,23,18,14,9,5,1,18,21,22,25,26,27,30,31,32,\
        34,36,37,39,41,43,45,47,51,57,62,66,72,77,81,87,92,96,102,106,111,116,120,124,128,132,136,140,143,147,151,163,\
        159,154,150,146,141,137,133,128,124,119,114,109,104,100,95,90,85,80,75,70,65,60,56,52,48,45,42,38,35,31,28,25,\
        21,18,14,11,7,3,0)
    b=(27,30,32,35,38,40,43,45,48,51,53,56,59,61,64,67,70,73,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,\
        126,129,132,135,138,142,145,148,151,154,157,161,164,167,170,174,177,180,184,187,190,194,197,200,204,206,207,209,\
        210,211,212,213,213,214,215,215,216,216,214,207,203,199,196,192,188,181,177,173,170,166,165,165,164,163,163,162,\
        162,161,161,159,159,158,157,156,155,152,151,150,149,148,147,146,143,145,149,153,157,161,166,170,174,178,182,186,\
        189,186,180,175,170,165,160,155,148,143,138,133,128,124,120,116,113,110,106,103,99,95,92,88,85,82,80,79,77,75,73,\
        71,69,67,65,63,60,61,62,63,63,66,67,67,68,69,69,71,72,72,71,71,71,70,71,70,69,69,68,67,66,89,92,95,98,101,104,\
        107,110,113,116,119,122,125,128,131,134,137,140,144,147,150,153,156,159,161,164,166,168,171,172,174,176,179,181,\
        184,186,189,191,194,196,215,212,209,205,202,199,195,192,189,186,184,181,178,175,172,169,166,163,160,157,154,151,\
        148,144,140,135,131,127,122,118,113,109,105,100,96,91,87,83,79,75)
    cm=register_rgb_colormap(r,g,b,'incus')
    return cm

def homeyer_cm():
    r=(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,7,9,11,14,16,19,21,24,26,28,31,33,36,38,41,43,45,48,50,53,55,58,60,63,66,68,71,\
        73,76,78,81,83,86,89,91,94,96,99,101,104,107,109,112,115,117,120,123,125,128,131,133,136,139,141,144,147,149,152,\
        155,158,160,163,166,169,171,174,177,180,182,185,188,191,193,196,199,201,203,205,207,209,211,213,215,217,219,221,\
        223,225,227,229,230,232,234,235,234,234,234,234,233,233,233,233,232,232,232,231,231,231,231,230,230,230,229,229,\
        229,229,228,228,228,227,227,227,227,226,226,226,226,225,225,225,224,224,224,223,223,223,223,222,222,222,221,221,\
        221,220,220,220,219,219,219,218,218,218,217,217,217,216,216,215,215,215,214,214,214,213,213,213,212,212,211,211,\
        210,210,209,209,209,208,208,207,207,206,206,205,205,205,204,203,203,202,202,201,201,200,200,199,198,198,197,197,\
        196,196,195,195,194,193,193,192,191,191,190,189,189,188,187,186,186,185,184,184,183,182,182,181,180,179,178,177,\
        177,176,175,174,173,172,172,171,170,169,168,167,167)
    g=(108,110,111,113,114,116,118,119,121,122,124,126,127,129,130,132,134,135,137,138,140,141,143,145,146,148,149,151,\
        152,154,156,157,159,160,162,163,165,166,168,169,171,172,174,175,177,179,180,182,183,185,186,188,189,191,192,194,\
        195,197,198,199,201,202,204,205,207,208,210,211,213,214,215,217,218,220,221,223,224,225,227,228,229,231,232,234,\
        235,236,238,239,241,242,243,245,245,246,246,247,247,248,248,248,249,249,250,250,251,251,252,252,253,253,252,250,\
        248,246,244,242,240,239,237,235,233,231,229,227,225,223,221,220,218,216,214,212,210,208,206,204,202,200,198,196,\
        194,192,190,188,186,184,182,180,178,175,173,171,169,167,165,163,161,159,157,155,153,151,148,146,144,142,140,138,\
        136,134,131,129,127,125,123,121,118,116,114,112,110,108,105,103,101,99,97,94,92,90,88,85,83,81,79,77,74,72,70,68,\
        65,63,61,59,56,54,52,49,47,45,43,40,38,36,33,31,29,27,24,22,20,17,15,13,11,8,6,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0)
    b=(198,198,197,196,196,195,194,194,193,192,192,191,190,190,189,188,188,187,186,185,184,184,183,182,181,180,179,178,\
        177,176,175,174,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,\
        150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,133,132,131,130,129,128,128,127,126,125,\
        124,124,123,122,121,120,119,119,117,116,114,113,112,110,109,107,106,105,103,102,100,99,98,96,95,94,91,87,84,81,\
        78,74,71,68,64,61,58,55,51,48,45,41,38,35,32,29,26,23,20,18,15,12,9,6,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    cm=register_rgb_colormap(r,g,b,'homeyer')
    return cm

def sw_cm():
    r=(144,143,142,140,139,138,137,135,134,133,132,130,129,128,127,126,124,123,122,121,119,118,119,121,123,125,127,128,\
        130,132,134,136,137,139,141,143,145,146,148,150,152,154,155,151,144,136,129,122,114,107,99,92,85,77,70,63,55,48,\
        41,33,26,18,11,4,6,18,30,42,54,66,78,90,102,114,126,139,151,163,175,187,199,211,223,235,247,254,252,250,248,245,\
        243,241,239,236,234,232,230,228,225,223,221,219,217,214,212,210,208,211,213,215,217,219,222,224,226,228,231,233,\
        235,237,239,242,244,246,248,251,253,255)
    g=(0,6,11,17,22,28,33,39,45,50,56,61,67,72,78,84,89,95,100,106,111,117,119,121,123,125,127,128,130,132,134,136,137,\
        139,141,143,145,146,148,150,152,154,155,157,158,160,161,163,164,166,167,169,170,172,173,175,176,177,179,180,182,\
        183,185,186,183,174,165,156,147,138,130,121,112,103,94,85,77,68,59,50,41,32,24,15,6,2,7,12,18,23,28,34,39,44,49,\
        55,60,65,71,76,81,86,92,97,102,108,113,120,127,133,140,147,154,160,167,174,181,187,194,201,208,214,221,228,235,\
        241,248,255)
    b=(159,157,155,153,151,149,147,145,144,142,140,138,136,134,132,130,128,126,124,122,120,118,119,121,123,125,127,128,\
        130,132,134,136,137,139,141,143,145,146,148,150,152,154,155,151,144,136,129,122,114,107,99,92,85,77,70,63,55,48,\
        41,33,26,18,11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    cm=register_rgb_colormap(r,g,b,'sw')
    return cm

def phi_cm():
    r=(254,247,240,233,226,219,212,205,198,191,184,177,171,164,158,152,145,136,127,118,109,100,84,66,48,30,12,4,4,4,4,4,\
        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,33,70,107,144,181,197,191,184,178,172,169,178,188,197,207,\
        216,224,231,238,245,252,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,254,\
        254,254,254,254,253,247,241,235,230,224,209,193,177,161,145,146,160,173,187,200,212,221,229,238,246,255)
    g=(4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,17,40,64,87,110,131,143,156,168,180,192,204,215,226,237,248,\
        242,226,210,194,179,166,159,152,145,138,131,122,113,103,94,85,101,123,145,167,189,188,164,140,115,91,75,90,104,\
        119,133,148,155,162,168,175,182,192,206,219,233,246,251,239,226,214,202,190,179,169,159,149,139,129,120,111,101,\
        92,90,96,102,108,114,118,110,103,96,88,81,67,52,37,21,6,0,0,0,0,0,0,0,0,0,0,0)
    b=(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\
        255,255,255,255,255,255,255,255,255,255,212,167,122,77,32,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,44,79,\
        114,148,183,181,144,107,70,32,7,24,42,59,77,95,85,72,60,48,36,28,22,17,12,7,15,50,85,121,156,190,179,169,159,149,\
        139,129,120,111,101,92,79,63,47,30,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    cm=register_rgb_colormap(r,g,b,'phi')
    return cm

def gematronik_cm():
    r=(0,2,5,7,10,12,15,17,20,23,25,28,30,33,35,38,40,43,46,48,51,53,56,58,61,64,66,69,71,74,76,1,3,5,8,10,13,15,18,21,24,27,\
        31,34,38,41,45,49,53,57,61,66,70,75,80,85,90,95,100,105,111,117,29,29,29,29,29,29,28,28,27,27,26,25,25,24,23,22,21,20,19,\
        18,17,15,14,13,11,10,8,6,5,3,1,35,37,39,41,44,46,49,52,55,58,61,64,67,71,74,78,82,86,90,94,99,103,108,112,117,122,127,132,\
        138,143,149,104,109,114,119,124,129,134,139,144,149,154,159,164,169,174,179,184,189,194,199,204,209,214,219,224,228,233,\
        238,243,248,253,130,134,138,142,146,150,154,158,162,166,171,175,179,183,187,191,195,199,203,207,211,216,220,224,228,232,\
        236,240,244,248,252,129,133,137,141,145,149,153,157,161,165,170,174,178,182,186,190,194,198,202,206,210,215,219,223,227,\
        231,235,239,243,247,251,121,125,129,134,138,142,146,151,155,159,164,168,172,177,181,185,190,194,198,203,207,211,216,220,\
        224,229,233,237,242,246,250)
    g=(0,2,5,7,10,12,15,17,20,23,25,28,30,33,35,38,40,43,46,48,51,53,56,58,61,64,66,69,71,74,76,1,3,5,8,10,13,15,18,21,24,27,\
        31,34,38,41,45,49,53,57,61,66,70,75,80,85,90,95,100,105,111,117,102,107,112,117,122,127,132,137,142,147,152,157,162,166,\
        171,176,181,186,191,196,201,206,211,216,221,226,231,236,241,246,251,101,106,111,116,121,126,131,135,140,145,150,155,160,\
        165,170,175,180,185,190,195,200,205,210,215,220,225,230,235,240,245,250,104,109,114,119,124,129,134,139,144,149,154,159,\
        164,169,174,179,184,189,194,199,204,209,214,219,224,228,233,238,243,248,253,51,53,55,57,59,61,63,65,67,69,72,74,76,78,80,\
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,0,2,3,4,6,8,10,11,13,15,17,20,22,24,27,29,32,34,37,40,43,46,49,52,\
        55,59,62,66,69,73,77,35,36,37,37,38,39,40,41,41,42,43,43,44,45,45,46,46,46,47,47,48,48,48,49,49,49,49,49,49,49,49)
    b=(0,4,8,12,16,20,24,28,32,36,40,45,49,53,57,61,65,69,73,77,81,86,90,94,98,102,106,110,114,118,122,103,108,113,118,123,128,\
        133,138,143,148,153,158,163,168,173,178,183,188,193,197,202,207,212,217,222,227,232,237,242,247,252,102,107,112,117,122,127,\
        132,137,142,147,152,157,162,166,171,176,181,186,191,196,201,206,211,216,221,226,231,236,241,246,251,0,2,3,5,7,9,12,14,16,\
        19,21,24,27,30,33,36,39,42,46,49,53,57,60,64,68,73,77,81,86,90,95,29,29,29,29,29,28,28,28,27,26,26,25,24,23,23,22,21,20,18,\
        17,16,15,13,12,10,9,7,5,4,2,0,0,0,1,2,2,3,3,4,5,6,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,25,26,27,29,0,2,3,4,6,8,10,\
        11,13,15,17,20,22,24,27,29,32,34,37,40,43,46,49,52,55,59,62,66,69,73,77,100,104,107,111,114,118,121,125,129,132,136,139,143,\
        146,150,153,157,160,164,167,171,174,178,181,185,188,192,195,199,202,206)
    cm=register_rgb_colormap(r,g,b,'gematronik')
    return cm
